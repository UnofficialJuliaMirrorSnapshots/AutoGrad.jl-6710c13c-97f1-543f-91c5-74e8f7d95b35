## Introduction

Both AutoGrad and Knet work by changing the behavior of primitive functions like `sin`.  In
AutoGrad, primitives need to record their input and output and have `back` methods defined
for gradient calculation.  In Knet, primitives need to call the appropriate GPU kernels to
act on GPU arrays. We accomplish these by defining new methods that dispatch on special
types. Knet uses KnetArray to mark GPU arrays, and AutoGrad uses Tracked for values to be
recorded.  In addition, broadcasting needs special treatment by both AutoGrad and Knet. 

The rest of this document outlines the details. We need to keep in mind that AutoGrad
primitives and Knet primitives are largely intersecting but may not be exactly the same set
of functions. We need to think about how combinations of Bcasted, Tracked, and KnetArray
behave.


## Types

Param <: Tracked   # indicates user defined parameter
Result <: Tracked  # the result of an operation with Param or Result args
Tracked <: Value   # the types to be recorded on tape
Bcasted <: Value   # type used to unfuse broadcasting
Value <: Any       # all Value args cause AutoGrad primitives to call forw()


## Recording

F(V::Tracked) ==> MethodError  # non-primitive, non-generic functions cannot handle Tracked
F(V::Tracked) ==> F'(V)        # generic F passes V to other functions F' in body
f(V::Tracked) ==> forw(f,V)    # if defined by macros.jl:@primitive(f)
f(V::Tracked) ==> f(value(V))  # if defined by macros.jl:@zerograd(f) calls f with stripped V
forw(f,V)   ==> f(value(V))    # calls f with stripped V and records the f, result, args, returns Result


## Broadcasting

Julia implements broadcast fusion, i.e. an expression like `sin.(cos.(x))` will end up
applying `sin(cos(xi))` to every element xi of x instead of performing `cos.(x)` first,
creating a temporary array and applying `sin.()` to that array. Fusion breaks both AutoGrad
and Knet. AutoGrad records every primitive function call, fusion with its O(n) calls instead
of O(1) (assuming `sin.()` is implemented as a single primitive) increases its
overhead. Knet relies on a fixed set of CUDA kernels in its library to act on GPU arrays and
we can't define a kernel for every operator combination like `sin(cos())`. Therefore fusion
needs to be stopped.

The way we stop fusion is by using another special type `Bcasted`. We turn a broadcasted
application of any function to a regular application to `Bcasted` arguments, e.g. `F.(x) =>
F(Bcasted(x)).value`. Then special methods defined for primitives reverses this at the
lowest level, e.g. `f(Bcasted(x)) => Bcasted(f.(x))`.


#### The way broadcasting works in Julia (from base/broadcast.jl):
# 
### Dot notation is lazy, explicit broadcast is not:
# (a .+ b .* c) => materialize(broadcasted(+, a, broadcasted(*, b, c)))
# sin.(cos.(x)) => materialize(broadcasted(sin, broadcasted(cos, x)))
# broadcast(sin, broadcast(cos, x)) => materialize(broadcasted(sin, materialize(broadcasted(cos, x))))
# 
### broadcasted creates a Broadcasted structure unless overriden:
# broadcasted(f,x...) => (xx = broadcastable.(x); broadcasted(combine_styles(xx...),f,xx...))
# broadcasted(::{S<:BroadcastStyle}, f, args...) = Broadcasted{S}(f, args)
#
### Broadcasted is a 4 parameters struct with 3 members:
# Broadcasted{Style}(f::F, args::Args, axes::Axes=nothing) =
# Broadcasted{Style, Axes, F, Args}(f, args, axes)
#
### materialize calculates the actual result using copy:
# materialize(bc::Broadcasted) = copy(instantiate(bc))
# materialize(x) = x
#
### instantiate: adds or checks the Axes component:
# instantiate(bc::Broadcasted{S}) = Broadcasted{S}(bc.f, bc.args, combine_axes(bc.args...))
# instantiate(x) = x
# 
### copy: allocates result container and fills it using copyto!
# copy(bc::Broadcasted) = copyto!(similar(bc, etype), bc)
# similar(bc::Broadcasted, ::Type{T}) = similar(Array{T}, axes(bc))
#
### copyto!: is responsible for calculating the final result


## Broadcasting in AutoGrad:

F.(X) ==> broadcasted(F,X)                                      # base
broadcast(F,X) ==> broadcasted(F,X)                             # base
broadcasted(F,X) ==> broadcasted(BroadcastStyle(X),F,X)         # base
broadcasted(f,V::Value) ==> forw(broadcast,f,V)                 # defined by macros.jl:@primitive(f)
broadcasted(S::BroadcastStye,F,X) ==> Broadcasted{S}(F,X)       # base
broadcasted(::Style{Value},F,V) ==> broadcasted(F,value(V)) 	# core.jl, if !recording()
broadcasted(::Style{Value},F,V) ==> F(Bcasted(V))               # core.jl, if recording()
f(B::Bcasted) ==> forw(f,B)                                     # defined by macros.jl:@primitive(f)
F(B::Bcasted) ==> F'(B)                                         # generic F calling F' which may be generic, primitive or other.
F(B::Bcasted) ==> MethodError()                                 # if F not primitive or generic
forw(f,B::Bcasted) ==> broadcast(f,value(B))                    # core.jl:forw called only for primitive f
forw(broadcast,f,V::Value) ==> broadcast(f,value(V))            # core.jl:forw called only for primitive f


## Broadcasting in Knet:

broadcasted(::Style{KnetArray},F,K) ==> F(Knet.Bcasted(K))      # karray.jl
F(x::Knet.Bcasted) ==> MethodError                              # if F is not a broadcasting Knet primitive
f(x::Knet.Bcasted) ==> bcasted(f, x.value)                      # defined if f is a broadcasting Knet primitive
broadcasted(::typeof(f),x::Knet.Bcasted) ==> bcasted(f, x.value)  # ditto, in case we have f.(::Knet.Bcasted)
bcasted(f,x...) ==> MethodError                                 # if bcasting primitive f has not been defined for x...
bcasted(f,x...) ==> broadcasted(f,x...)                         # if bcasting primitive f has been defined for x...
broadcasted(f,::KnetArray) ==> ccall()                          # defined if f is a broadcasting Knet primitive
f(::KnetArray) ==> ccall()                                      # defined if f is a non-broadcasting Knet primitive

Notes:

1. If we do not have Style{KnetArray}, any F broadcasting over a KnetArray that is not a
broadcasting Knet primitive will use DefaultArrayStyle and give an Array result using
inefficient indexing.

2. We give Style{KnetArray} lower precedence than Style{Value} so the AutoGrad mechanism
runs first. If there is a mix of KnetArray and Value arguments, the Values will be stripped
first.

3. We introduce Knet.Bcasted because using AutoGrad.Bcasted results in infinite loop:

broadcasted(::Style{KnetArray},F,K) ==> F(Bcasted(K))
F(BK::Bcasted{KnetArray}) ==> forw(F,BK)
forw(F,BK) ==> broadcast(F,K)
broadcast(F,K) ==> broadcasted(F,K)
broadcasted(F,K) ==> broadcasted(::Style{KnetArray},F,K)

4. The reason this is not a problem in AutoGrad is that forw strips out the Value before
passing the args back to broadcast, and second time around the BroadcastStyle will no longer
be Style{Value}.

5. The reason the Bcasted methods are defined very type specific is another potential
infinite loop. Consider a broadcasting primitive f that has been defined for two KnetArrays,
but not a KnetArray and some other type.

broadcasted(f,K,A) ==> broadcasted(::Style{KnetArray},f,K,A)
broadcasted(::Style{KnetArray},f,K,A) ==> f(Bcasted(K),Bcasted(A))
f(Bcasted(K),Bcasted(A)) => broadcasted(f,K,A)

Defining Bcasted methods type specific prevents the last line from triggering and we get a
MethodError instead.


## Function types: these bits define 64 types, most not realized.
# 5,6 gives 4 non-primitive types
# 1-4 gives 16 primitive types for a total of 20.
1. Knet non-broadcasting primitive
2. Knet broadcasting primitive
3. AutoGrad non-broadcasting primitive
4. AutoGrad broadcasting primitive
5. Non-Generic
6. Base



## Derivation with KnetArray (deprecated)

Legal combos: T, BT, VT, BVT, K, BK, VK, BVK

Currently: when input to F has B*, V*
if  recording: F(B.(args)...).value
not recording: broadcasted(F, value.(args)...)

KnetArray should be Bcasted even when not recorded.
If we simply tap into the AutoGrad mechanism by adding one rule,
we get F(B.(args)...).value whenever an argument is KnetArray.
primitives get f(BK).
this calls forw(f,BK).
this calls broadcast(f,K) which does get reduced to broadcasted!
broadcasted is defined with Knet primitives.

## Derivation (deprecated)

F(X)  =(0)=> f(X), f.(X)

F.(X) =(0)=> b(F,X)
f.(X) =(0)=> b(f,X)

F.(T) =(0)=> f(X), f.(X)  # T can have anything inside
F.(V) =(1)=> F(B(V)).val  # careful not to get B(V(B))
F.(B) =(2)=> F(B).val     # careful not to get B(B(T))

f(T)    =(0)=> X          # T can have anything inside
f(V(X)) =(3)=> V(f(X))    # and record the op if there is a tape, f(X) otherwise
f(B(X)) =(4)=> B(f.(X))   # what happens if there is a mix of B,V args?

f.(T)    =(0)=> X         # T can have anything inside
f.(V(X)) =(5)=> V(f.(X))  # and record the op if there is a tape, f.(X) otherwise
f.(B(X)) =(6)=> B(f.(X))  # same as (4)

Primitives: V in V out, B in B out. What if V,B in => BV out!

How do we get V,B,BV: User defines Param, F.(V) introduces B

How do we not get VB, BB, VV:
If we assume X can only be T,VT,BT,BVT
Rule (1) can only turn VT into BVT
Rule (2) leaves BT and BVT as is
Rule (3),(5) can prepend V to anything!
Rule (4),(6) can prepend B to anything!
If f(T) and f.(T) results are unbounded!
If we guarantee f(T) and f.(T) give T, then we are ok.

getindex(Any[B,V,...], i) => will turn T into B,V!

What if we strip all the extra B,V in forw?
If we see any V: record and return a Result
If we see any B: broadcast and return a Bcasted
We can strip and re-add B at any position (preferrably the front)
So we can keep it to a single B being careful in (4) and (6).
Does V(V(X)) ever make sense?

We strip all before calling result = f(argvals...; kwargs...)
The return value could still be a Result due to getindex?
Any[P,P,P...] params of a model but that getindex does not call forw.
We should try to keep to f(T)->T.

Otherwise the arg specific types we specify in @primitive won't match.
Union{T,Value{T},Value{Value{T}}...} (assuming Bcasted <: Value)

Legend:
F: arbitrary function
f: primitive function
b: broadcasted
B: Bcasted
V: Param or Result
T: types other than B,V
X: any type
=(0)=>: parser or eval
=(i)=>: rule that needs to be implemented


## Tape (deprecated)

Tape: valN=>nodeN, ..., val1=>node1, NIL=>node0
mutable structs are a lot faster as keys for an IdDict!
Special node0 marks both ends of the tape: 
node[n].cdr = node[n-1]
node1.cdr = node0
node0.cdr = nodeN
Special Value NIL acts as a key to node0.
Tape is iterated in reverse, last in first out
This automatically makes first(tape) the final result node
last(tape) is the initial parameter node, but default slow.
The last(::Tape) hack is to make old style grad faster.
Alternative: define a struct for Tape, also addresses https://discourse.julialang.org/t/atom-cant-evaluate-a-line-which-the-regular-repl-can/17549/2


## Current design avoids generating Broadcasted objects: (deprecated)

# For regular primitives:
# f(x...) => forw(f,x...)           # (macros.jl; @primitive f if any x is a Value)
# forw(f,x...) => f(value.(x)...)   # (core.jl; f is the recorded function)
# back(f,i,dy,y,x...)               # (macros.jl; @primitive defines this)

# For broadcasted primitives:
# f.(x...) => broadcasted(f,x...)                       # (parser)
# broadcasted(f,x...) => forw(broadcast,f,x...)         # (macros.jl; @primitive defines this, @primitive1 does not)
# forw(broadcast,f,x...) => broadcast(f,value.(x)...)   # (core.jl; broadcast is the recorded function)
# back(broadcast,i,dy,y,f,x...)                         # (macros.jl; @primitive defines this, @primitive1 does not)

# For direct use of broadcast:
# broadcast(f,x...) => materialize(broadcasted(f,x...)) # (base/broadcast.jl fallback for unknown Value types)
# broadcasted(f,x...) => forw(broadcast,f,x...)         # (forw calling broadcast with unboxed args returning Value)
#DEPRECATED: materialize(x::Value) => x                            # (broadcast.jl; defined below)


## Notation (deprecated)

k -- Knet primitive
g -- AutoGrad primitive
f -- Primitive for both Knet and AutoGrad
F -- Non-primitive function
F. -- broadcasted version of F

B -- Bcasted
T -- Tracked
K -- KnetArray
A -- Any type other than above three
X -- Any type
A, TA, BA, BTA, K, TK, BK, BTK -- 8 legal type combinations


## TODO:

- There is manual use of forw to define primitives in Knet in karray.jl (cat, convert), old use in rnn (rnnforw) that needs to be checked.
- sum, mean etc. are non-broadcasting Knet primitives. Should check non-bcasting and only-bcasting Knet/AG primitives separately.
- add bcasting tests to AutoGrad and Knet

